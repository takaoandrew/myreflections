How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    It compared every line, and showed only recent changes. 
    From such a small selection of changes we could manually search for a typo, or bug.
    The smaller the changes, the better in terms of line length.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    If you make a grave mistake, you can go to a previous version to change it.
    You can see cause and effect relationships very clearly.
    You can see how you improve over time.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    The main pro is you can decide a logical change.
    You can make major changes without worrying about retaining a functional code later on.
    One con is if you forget to save, you may lose work.
    You may also commit a bit too much, cluttering your commit list.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    In git, often the different files all relate to one another.
    To maintain functionality, they should all be saved when they work together.
    Google docs does not want to unnecessarily save different versions when other files are saved.
    

How can you use the commands git log and git diff to view the history of files?

    Git log will show a complete history of all of the commits, along with their ids.
    Using git diff with the ids found, we can see what specifically changed in each commit.

How might using version control make you more confident to make changes that
could break something?

    You would not be afraid to make major changes to your code, as a previously saved and working version would exist.
    

Now that you have your workspace set up, what do you want to try using Git for?

    Getting my android studio nanodegree!
